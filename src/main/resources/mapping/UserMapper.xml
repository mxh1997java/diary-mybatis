<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="www.maxinhai.com.diarymybatis.mapper.UserMapper">

    <!--开启本mapper的namespace下的二级缓存-->
    <!--
        eviction:代表的是缓存回收策略，目前MyBatis提供以下策略。
        (1) LRU,最近最少使用的，一处最长时间不用的对象
        (2) FIFO,先进先出，按对象进入缓存的顺序来移除他们
        (3) SOFT,软引用，移除基于垃圾回收器状态和软引用规则的对象
        (4) WEAK,弱引用，更积极的移除基于垃圾收集器状态和弱引用规则的对象。这里采用的是LRU，
                移除最长时间不用的对形象

        flushInterval:刷新间隔时间，单位为毫秒，这里配置的是100秒刷新，如果你不配置它，那么当
        SQL被执行的时候才会去刷新缓存。

        size:引用数目，一个正整数，代表缓存最多可以存储多少个对象，不宜设置过大。设置过大会导致内存溢出。
        这里配置的是1024个对象

        readOnly:只读，意味着缓存数据只能读取而不能修改，这样设置的好处是我们可以快速读取缓存，缺点是我们没有
        办法修改缓存，他的默认值是false，不允许我们修改
    -->
    <cache eviction="LRU" flushInterval="100000" readOnly="true" size="1024"/>

    <!--结果映射-->
    <resultMap id="BaseResultMap" type="www.maxinhai.com.diarymybatis.entity.User">
        <id column="user_id" property="user_id" jdbcType="INTEGER"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="createTime" property="createTime" jdbcType="DATE"/>
        <result column="modifyTime" property="modifyTime" jdbcType="DATE"/>
    </resultMap>

    <!--可以通过设置useCache来规定这个sql是否开启缓存，ture是开启，false是关闭-->
    <!--<select id="getAllUser" resultType="www.maxinhai.com.diarymybatis.entity.User" useCache="true">-->
        <!--select * from t_user;-->
    <!--</select>-->

    <!--根据id或username查询一个用户信息-->
    <select id="findOneByCondition"
            resultType="www.maxinhai.com.diarymybatis.entity.User"
            parameterType="www.maxinhai.com.diarymybatis.entity.User" useCache="true">
        select * from diary_user where 0>1
        <if test="user_id != null" >
            and user_id=#{user_id}
        </if>
        <if test="username != null" >
            and username=#{username}
        </if>
        <if test="password != null" >
            and password=#{password}
        </if>
    </select>
    
    <select id="findAllByCondition"
            parameterType="java.util.Map"
            resultType="www.maxinhai.com.diarymybatis.entity.User">
        select * from diary_user where 0>1
        <if test="username != null" >
            and username like #{username}
        </if>
        <if test="description != null" >
            and description like #{description}
        </if>
        <if test="beginTime != null">
            and createTime > DATE_FORMAT(#{beginTime}, '%Y-%m-%d')
        </if>
        <if test="endTime != null">
            and DATE_FORMAT(#{endTime}, '%Y-%m-%d') > createTime
        </if>
    </select>

    <!--useGeneratedKeys="true"使用自增主键 keyProperty="user_id"确定主键key-->
    <insert id="addUser" parameterType="www.maxinhai.com.diarymybatis.entity.User"
            useGeneratedKeys="true" keyProperty="user_id">
        insert into diary_user (username,password) values (#{username},#{password});
    </insert>

    <update id="updateUserById" parameterType="www.maxinhai.com.diarymybatis.entity.User">
        update diary_user
        <set>
            <if test="username != null">
                username=#{username},
            </if>
            <if test="password != null">
                password=#{password},
            </if>
        </set>
        where user_id=#{user_id}
    </update>

    <delete id="deleteUserById">
        delete from diary_user where user_id=#{user_id}
    </delete>

</mapper>
